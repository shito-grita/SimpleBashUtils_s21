#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define BUFFER_SIZE 1024

typedef struct {
  bool suppress_empty_lines;
  bool number_empty_lines;
  bool show_end_of_line;
} CatOptions;

void print_file(const char *filename, CatOptions options) {
  FILE *file = fopen(filename, "r");
  if (file == NULL) {
    exit(EXIT_FAILURE);
  }

  char buffer[BUFFER_SIZE];
  int line_number = 1;

  while (fgets(buffer, BUFFER_SIZE, file) != NULL) {
    if (options.show_end_of_line) {
      size_t len = strlen(buffer);
      if (len > 0 && buffer[len - 1] == '\n') {
        buffer[len - 1] = '\0';
      }
      printf("%s$\n", buffer);
    } else {
      bool is_empty_line = (buffer[0] == '\n');

      if (options.suppress_empty_lines && is_empty_line) {
        continue;
      }

      if (options.number_empty_lines || !is_empty_line) {
        printf("%6d\t", line_number++);
      }
      fputs(buffer, stdout);
    }
  }
  fclose(file);
}

int main(int argc, char *argv[]) {
  CatOptions options = {false, false, false};

  for (int i = 1; i < argc; i++) {
    if (strcmp(argv[i], "-s") == 0) {
      options.suppress_empty_lines = true;
    } else if (strcmp(argv[i], "-b") == 0) {
      options.number_empty_lines = true;
    } else if (strcmp(argv[i], "-n") == 0) {
      options.number_empty_lines = false;
    } else if (strcmp(argv[i], "-e") == 0) {
      options.show_end_of_line = true;
    } else {
      print_file(argv[i], options);
    }
  }
  return EXIT_SUCCESS;
}